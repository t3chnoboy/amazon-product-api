// Generated by CoffeeScript 1.12.3
(function() {
  var amazonProductApi, credentials, formatQueryParams, generateQueryString, sleep, urlRegex;

  amazonProductApi = require('../lib/index');

  generateQueryString = require('../lib/utils').generateQueryString;

  formatQueryParams = require('../lib/utils').formatQueryParams;

  urlRegex = require('./regex-weburl');

  credentials = {
    awsTag: process.env.AWS_TAG,
    awsId: process.env.AWS_ID,
    awsSecret: process.env.AWS_SECRET
  };

  sleep = function(ms) {
    return new Promise(function(resolve) {
      return setTimeout(resolve, ms);
    });
  };

  describe('formatQueryParams(query, method, credentials)', function() {
    sleep(1000);
    it('should return an object', function() {
      var queryParams;
      queryParams = formatQueryParams({
        artist: 'Muse',
        searchIndex: 'Music',
        responseGroup: 'Small,Offers,Images,ItemAttributes'
      }, 'ItemSearch', credentials);
      return queryParams.should.be.an.Object;
    });
    describe('ItemSearch', function() {
      return it('should use default values and constants', function() {
        var queryParams;
        queryParams = formatQueryParams({}, 'ItemSearch', credentials);
        queryParams.should.have.property('Condition', 'All');
        queryParams.should.have.property('Keywords', '');
        queryParams.should.have.property('ResponseGroup', 'ItemAttributes');
        queryParams.should.have.property('SearchIndex', 'All');
        queryParams.should.have.property('ItemPage', '1');
        return queryParams.should.have.property('Version', '2013-08-01');
      });
    });
    describe('ItemLookup', function() {
      return it('should use default values and constants', function() {
        var queryParams;
        queryParams = formatQueryParams({}, 'ItemLookup', credentials);
        queryParams.should.have.property('Condition', 'All');
        queryParams.should.have.property('IdType', 'ASIN');
        queryParams.should.have.property('IncludeReviewsSummary', 'True');
        queryParams.should.have.property('ResponseGroup', 'ItemAttributes');
        queryParams.should.have.property('TruncateReviewsAt', '1000');
        queryParams.should.have.property('VariationPage', 'All');
        return queryParams.should.have.property('Version', '2013-08-01');
      });
    });
    return describe('BrowseNodeLookup', function() {
      return it('should use default values and constants', function() {
        var queryParams;
        queryParams = formatQueryParams({}, 'BrowseNodeLookup', credentials);
        queryParams.should.have.property('ResponseGroup', 'BrowseNodeInfo');
        return queryParams.should.have.property('Version', '2013-08-01');
      });
    });
  });

  describe('generateQueryString(query, method, credentials)', function() {
    sleep(1000);
    return it('should return a string', function() {
      var queryString;
      queryString = generateQueryString({
        keywords: 'Game of Thrones',
        searchIndex: 'DVD',
        responseGroup: 'Images,ItemAttributes'
      }, 'ItemSearch', credentials);
      queryString.should.be.a.String;
      return describe('query string', function() {
        it('should be a valid url', function() {
          return queryString.should.match(urlRegex);
        });
        it('should include a valid timestamp', function() {
          return queryString.should.match(/&Timestamp=([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24\:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?/);
        });
        it('should include keywords', function() {
          var keywords, unescapedKeywords;
          unescapedKeywords = /&Keywords=(.+?)&/.exec(queryString);
          keywords = decodeURIComponent(unescapedKeywords[1]);
          return keywords.should.equal('Game of Thrones');
        });
        return it('should be signed', function() {
          var signature;
          signature = decodeURIComponent((/&Signature=(.+)$/.exec(queryString))[1]);
          return signature.should.match(/[A-Fa-f0-9]*=$/);
        });
      });
    });
  });

  describe('createClient(credentials)', function() {
    return it('should return amazon product api client with item search method', function() {
      var client;
      client = amazonProductApi.createClient(credentials);
      client.should.have.property('itemSearch');
      return client.itemSearch.should.be.a.Function;
    });
  });

  describe('client.itemSearch(query, cb)', function() {
    return sleep(1000);
  });

  describe('when credentials are valid', function() {
    var client;
    client = amazonProductApi.createClient(credentials);
    describe('when no callback is passed', function() {
      it('should return search results from amazon', function() {
        return client.itemSearch({
          keywords: 'Pulp fiction',
          searchIndex: 'DVD',
          responseGroup: 'Offers'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
      return it('should work with custom domain', function() {
        return client.itemSearch({
          keywords: 'Pulp fiction',
          searchIndex: 'DVD',
          responseGroup: 'Offers',
          domain: 'webservices.amazon.co.uk'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
    });
    return describe('when callback is passed', function() {
      sleep(1000);
      return it('should return search results from amazon', function() {
        return client.itemSearch({
          keywords: 'Pulp fiction',
          searchIndex: 'DVD',
          responseGroup: 'Offers'
        }, function(err, response) {
          response.should.be.an.Object;
          response.data.should.be.an.Object;
          response.data.Items[0].should.have.property('Request');
          response.data.Items[0]['Request'].should.be.an.Array;
          response.data.Items[0]['Request'][0].should.have.property('IsValid', ["True"]);
          return response.data.Items[0]['Request'][0].should.have.property('ItemSearchRequest');
        });
      });
    });
  });

  describe('when credentials are invalid', function() {
    var client;
    client = amazonProductApi.createClient({
      awsTag: 'sfsadf',
      awsId: 'sfadf',
      awsSecret: 'fsg'
    });
    describe('when no callback is passed', function() {
      return it('should return an error', function() {
        return client.itemSearch({
          keywords: 'Pulp fiction',
          searchIndex: 'DVD',
          responseGroup: 'Offers'
        })["catch"](function(err) {
          err.should.be.an.Object;
          return err.should.have.property('Error');
        });
      });
    });
    return describe('when callback is passed', function() {
      return it('should return an error', function(done) {
        return client.itemSearch({
          keywords: 'Pulp fiction',
          searchIndex: 'DVD',
          responseGroup: 'Offers'
        }, function(err, results) {
          err.should.be.an.Object;
          err.should.have.property('Error');
          return done();
        });
      });
    });
  });

  describe('client.itemLookup(query, cb)', function() {
    return sleep(1000);
  });

  describe('when credentials are valid', function() {
    var client;
    client = amazonProductApi.createClient(credentials);
    describe('when no callback is passed', function() {
      it('should return search results from amazon', function() {
        return client.itemLookup({
          idType: 'UPC',
          itemId: '889030012227'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
      return it('should work with custom domain', function() {
        return client.itemLookup({
          idType: 'UPC',
          itemId: '889030012227'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
    });
    return describe('when callback is passed', function() {
      sleep(1000);
      return it('should return search results from amazon', function() {
        return client.itemLookup({
          idType: 'UPC',
          itemId: '889030012227'
        }, function(err, response) {
          response.should.be.an.Object;
          response.data.should.be.an.Object;
          response.data.Items[0].should.have.property('Request');
          response.data.Items[0]['Request'].should.be.an.Array;
          response.data.Items[0]['Request'][0].should.have.property('IsValid', ["True"]);
          return response.data.Items[0]['Request'][0].should.have.property('ItemLookupRequest');
        });
      });
    });
  });

  describe('when credentials are invalid', function() {
    var client;
    client = amazonProductApi.createClient({
      awsTag: 'sfsadf',
      awsId: 'sfadf',
      awsSecret: 'fsg'
    });
    describe('when no callback is passed', function() {
      return it('should return an error', function() {
        return client.itemLookup({
          idType: 'UPC',
          itemId: '889030012227'
        })["catch"](function(err) {
          err.should.be.an.Object;
          return err.should.have.property('Error');
        });
      });
    });
    return describe('when callback is passed', function() {
      return it('should return an error', function(done) {
        return client.itemLookup({
          idType: 'UPC',
          itemId: '889030012227'
        }, function(err, results, response) {
          err.should.be.an.Object;
          err.should.have.property('Error');
          return done();
        });
      });
    });
  });

  describe('when the request returns an error', function() {
    var client;
    client = amazonProductApi.createClient(credentials);
    describe('when no callback is passed', function() {
      return it('should return the errors inside the request node', function() {
        return client.itemLookup({
          idType: 'ASIN',
          itemId: 'B00QTDTUVM'
        })["catch"](function(err) {
          return err.should.be.an.Object;
        });
      });
    });
    return describe('when callback is passed', function() {
      return it('should return the errors inside the request node', function() {
        return client.itemLookup({
          idType: 'ASIN',
          itemId: 'B00QTDTUVM'
        }, function(err, results) {
          return err.should.be.an.Array;
        });
      });
    });
  });

  describe('client.browseNodeLookup(query, cb)', function() {
    return sleep(1000);
  });

  describe('when credentials are valid', function() {
    var client;
    client = amazonProductApi.createClient(credentials);
    describe('when no callback is passed', function() {
      it('should return search results from amazon', function() {
        return client.browseNodeLookup({
          browseNodeId: '549726',
          responseGroup: 'NewReleases'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
      return it('should work with custom domain', function() {
        return client.browseNodeLookup({
          browseNodeId: '549726',
          responseGroup: 'NewReleases'
        }).then(function(results) {
          return results.should.be.an.Object;
        });
      });
    });
    return describe('when callback is passed', function() {
      sleep(1000);
      return it('should return search results from amazon', function() {
        return client.browseNodeLookup({
          browseNodeId: '549726',
          responseGroup: 'NewReleases'
        }, function(err, response) {
          response.should.be.an.Object;
          response.data.should.be.an.Object;
          response.data.BrowseNodes[0].should.have.property('Request');
          response.data.BrowseNodes[0]['Request'].should.be.an.Array;
          response.data.BrowseNodes[0]['Request'][0].should.have.property('IsValid', ["True"]);
          return response.data.BrowseNodes[0]['Request'][0].should.have.property('BrowseNodeLookupRequest');
        });
      });
    });
  });

  describe('when credentials are invalid', function() {
    var client;
    client = amazonProductApi.createClient({
      awsTag: 'sfsadf',
      awsId: 'sfadf',
      awsSecret: 'fsg'
    });
    describe('when no callback is passed', function() {
      return it('should return an error', function() {
        return client.browseNodeLookup({
          browseNodeId: '549726',
          responseGroup: 'NewReleases'
        })["catch"](function(err) {
          err.should.be.an.Object;
          return err.should.have.property('Error');
        });
      });
    });
    return describe('when callback is passed', function() {
      return it('should return an error', function(done) {
        return client.browseNodeLookup({
          browseNodeId: '549726',
          responseGroup: 'NewReleases'
        }, function(err, results) {
          err.should.be.an.Object;
          err.should.have.property('Error');
          return done();
        });
      });
    });
  });

  describe('when the request returns an error', function() {
    var client;
    client = amazonProductApi.createClient(credentials);
    describe('when no callback is passed', function() {
      return it('should return the errors inside the request node', function() {
        return client.browseNodeLookup({
          browseNodeId: '102340',
          responseGroup: 'NewReleases'
        })["catch"]((function(_this) {
          return function(err) {
            err.should.be.an.Array;
            err[0].should.be.an.Object;
            return err[0].should.have.property('Error');
          };
        })(this));
      });
    });
    return describe('when callback is passed', function() {
      return it('should return the errors inside the request node', function() {
        return client.browseNodeLookup({
          browseNodeId: '102340',
          responseGroup: 'NewReleases'
        }, function(err, results) {
          err.should.be.an.Array;
          err[0].should.be.an.Object;
          return err[0].should.have.property('Error');
        });
      });
    });
  });

  describe('escape rfc 3986 reserved chars', function() {
    var client;
    sleep(1000);
    client = amazonProductApi.createClient(credentials);
    return it('should return search results from amazon', function() {
      return client.itemSearch({
        keywords: "Ender's Game",
        searchIndex: 'DVD',
        responseGroup: 'Offers'
      }).then(function(results) {
        return results.should.be.an.Object;
      });
    });
  });

}).call(this);

//# sourceMappingURL=test.js.map
